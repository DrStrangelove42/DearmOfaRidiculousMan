                                 HOW IT WORKS
                  A General Guide to the DOARM data structures

    Table of contents
    I) Maps                                                     l. 8
    II) Story mode scripts                                      l. 110

I) Maps

How to create a world using a text file:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Name - The name of the text file (without the extension) is the name of the world.

Each world is composed of a positive number of maps, which may correspond 
to floors in a dungeon for example.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
First line - The first line contains the number of maps in the world.

In the following lines, each map is described one by one.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
First line of each map - The first line of each map description must be ##.

Second line of each map - The second line in the description of a map is an integer containing the 
positive number of rooms.

After this, each room is described one by one.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Each room is described as follows:
 - The first line contains #.
 - The second line contains two integers: the width and the height of the room.
 - The third line contains two integers describing the absolute position 
   (coordinates x and y) of the room.
 - After this, the lines up to the next one containing # contain information 
   on the different types of objects or entities that are in the room.
   For each of these lines (if it isn't just blank space), the first character 
   encodes the type of object/entity, the second is the identifier, and what 
   follows is an encoding of the additional information.
 - After the line containing #, the layout of the room is described.
 - Every three characters encode one block in the room.
 - Of the three characters, the first encodes the type of block,
   the second the type of object/entity that is on that block,
   the third is an optional identifier for that object/entity (which has a 
   different function depending on the object/entity).
 - The different characters that can encode types of blocks are:
   - ' ' : empty block.
   - 'w' : wall block.
   - 'b'ush, 'g'rass, 't'ree
   - 'f' : floor block.
   - 's' : stone wall block
   - '*' : glass floor block (semi-transparent)
   - 'S' : sand floor block
   - 'W' : water block
 - The different characters that can encode objects/entities are:
   - ' ' : no object or entity.
   - 'p' : player starts on this block. Additional information about the player's
	   starting situation can be described in the header, on a line starting
	   with 'p', a space, and then successively integers representing
	   the player's health (default : maximum), number of lives (default : 3),
	   coins (default : 0), experience (default : 0), maximum health per
	   life (default : 100), each separated by a space. To use the default
	   value for any of these, write 'X' instead of an integer, and not all
	   of them need to be present (For example if only one integer is
	   written, it will be the value of the player's health, and the others
	   will have the default value. After this, the player's initial
	   inventory can be described, with each object described between
	   parentheses, and each object separated with a space.
   - '!' : block from which a player can warp. The coordinates of the block
           to which the player warps is described in the header, on a line 
           starting with '!' followed by the identifier, and then the integers 
           representing map number, room number, x coordinate, y coordinate,
	   separated by spaces.
           Two optional parameters follow : the delay in ticks (or X to use the
	   default value), and the destination world (for external warps). 
   - 'k' : key, the following character is the identifier.
   - 'd' : door that can be unlocked with a key. The characteristics of the door 
           are described in the header, on a line starting with d followed by 
           the identifier of the door, a space, the identifier of the key that
           unlocks it, and then the direction the door faces when it's closed 
           and when it's open, with spaces. After there is an optional character
	   which can be used to describe the state of the door : 'c' if it's
	   closed, 'o' if it's open. Note that doors are closed by default, so
	   this is only useful if we want the door to be open.	   
   - 'c' : chest, information about the contents of the chest should be written 
           in the header, on a line starting with c followed by the identifier,
	   and then the description of each of the objects in it between
	   parentheses successively. The objects can be "sw" for a sword,
	   followed by an optional integer for the attack value, the default
	   being 10, or "sh" for a sword, followed by an optional integer for
	   the defense value, the default being 10.
   - a character representing a monster :
	- 'g' : a ghost.
	- 'G' : an intelligent ghost (one that follows the player).
	- 's' : a skeleton.
	- 'S' : an intelligent skeleton (one that follows the player).
	- 'F' : a fireball.
   - 'B' : a butler (NPC), the header should contain 'B' followed by the
	   identifier, a space, the butler's name, a space, and the butler's
	   speech. The name and the speech mustn't contain spaces, and
   	   correspond to text found in Res/Text.
   - 'b' : a signboard, the header should contain 'b', followed by the
	   identifier, a space, and the sign's text content. Again, this doesn't
	   contain spaces and corresponds to a text in Res/Text.
The format can be summarised as follows:

*Contents of NameOfWorld.txt (or other extension)*
Number of maps
##
Number of rooms in first map
#
Dimensions of first room of first map
Absolute location of first room of first map
Information pertaining to objects and entities in first room of first map
#
Layout of first room of first map
#
.
.
.
#
Dimensions of last room of first map
Absolute location of last room of first map
Information pertaining to objects and entities in last room of first map
#
Layout of last room of first map
##
.
.
.
##
Number of rooms in last map
#
#
Dimensions of first room of last map
Absolute location of first room of last map
Information pertaining to objects and entities in first room of last map
#
Layout of first room of lastmap
#
.
.
.
#
Dimensions of last room of last map
Absolute location of last room of last map
Information pertaining to objects and entities in last room of last map
#
Layout of last room of last map








II) Story mode scripts

A story script is a textfile located in Res/StoryMode containing command lines (each line is a command line), 
in a very straightforward flavour : each line starts with a upper-case keyword like PART or NPC.. Comments 
are written with the keyword REM. 

The first actual command (different from REM) must be PART. Parts are the main compound of the story.
When the player makes choices through NPCs, the part changes. 

The language is sequential : the first part to be declared will be the starting part, and then parts are
referenced by their identifiers (they may contain spaces).
e.g. :
_________________________________________________________________________________________
| PART dummy                                                                            |
| .                                                                                     |
| . (commands - different from PART - to be executed in the "dummy" part)               |
| .                                                                                     |
| PART second dummy part                                                                |
| .                                                                                     |
| . (commands - different from PART - to be executed in the "second dummy part" part)   |
| .                                                                                     |
| PART ...                                                                              |

Syntax of PART :
    PART <name of the part>

A part is made of several other commands which are described below. The description section is list of
comma-separated values.
	MAP World name, start map index, start room index
Tells the story parser to consider that the current part takes place in this map. If there is more than one
MAP command in a part, the player will warp though all of them to the last, so it is useless, but *a priori* do
not throw any error. The story script must contain at least one MAP command, if the first part does not have one,
the start map will be the first MAP command encountered, even in a different part.

    NPC x y textureID,name,speech,choice1,partIndex1,...,choiceN,partIndexN
Creates a NPC (non player character) which can interact with the player in order to change the course of events.
choiceI is the text of the choice (in a button below the NPC speech), and the associated partIndexI is the name of
the part to go to if this option is chosen. For now, no commas are allowed in name, speech or any other field.

    MOB x y <map monster id>
Creates a monster. The description section is the same as in maps (like F for fireball)

    OBJ x y <map object description>
Creates an object. (Same as in maps, like k1 to create a key of id 1)